apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'bivrost'
apply plugin: 'io.fabric'
apply from: '../buildsystem/coverageReport.gradle'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    defaultConfig {
        applicationId "pm.gnosis.heimdall"
        versionCode getInt("APP_VERSION_CODE", 703)
        versionName getKey("APP_VERSION_NAME", "0.4.2-alpha")
        testInstrumentationRunner "pm.gnosis.tests.MockTestRunner"

        // Debug Settings
        buildConfigField javaTypes.BOOLEAN, "VERBOSE_EXCEPTIONS", getKey("VERBOSE_EXCEPTIONS", "false")
        // External Link
        buildConfigField javaTypes.STRING, "CHROME_EXTENSION_URL", asString(getKey("CHROME_EXTENSION_URL", "https://safe.gnosis.io/#personal"))
        // Contracts
        buildConfigField javaTypes.STRING, "SUPPORTED_SAFE_MASTER_COPY_ADDRESSES", asString(getKey("SUPPORTED_SAFE_MASTER_COPY_ADDRESSES",
                "0xAC6072986E985aaBE7804695EC2d8970Cf7541A2," + // Version 0.0.2-alpha (Mainnet)
                        "0x8942595A2dC5181Df0465AF0D7be08c8f23C93af," + // Version 0.1.0 (All networks)
                        "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A" // Version 1.0.0 (All networks)
        ))
        buildConfigField javaTypes.STRING, "CURRENT_SAFE_MASTER_COPY_ADDRESS", asString(getKey("CURRENT_SAFE_MASTER_COPY_ADDRESS", "0xb6029EA3B2c51D09a50B53CA8012FeEB05bDa35A"))
        buildConfigField javaTypes.STRING, "PROXY_FACTORY_ADDRESS", asString(getKey("PROXY_FACTORY_ADDRESS", "0x12302fE9c02ff50939BaAaaf415fc226C078613C"))
        buildConfigField javaTypes.STRING, "MULTI_SEND_ADDRESS", asString(getKey("MULTI_SEND_ADDRESS", "0xe74d6af1670fb6560dd61ee29eb57c7bc027ce4e"))
        // Safe creation params
        buildConfigField javaTypes.INT, "PROXY_INIT_DATA_LENGTH", getKey("PROXY_INIT_DATA_LENGTH", "3006")
        buildConfigField javaTypes.STRING, "PROXY_INIT_DATA_HASH", asString(getKey("PROXY_INIT_DATA_HASH", "edf1810f1a9b5415ef81722254f125afaa5165f526077a7d7da91687cdfbc98b"))
        buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0xd9e09beaEb338d81a7c5688358df0071d4988115"))
        // API keys
        buildConfigField javaTypes.STRING, "INFURA_API_KEY", asString(getKey("INFURA_API_KEY", ""))
        // Services
        buildConfigField javaTypes.STRING, "BLOCKCHAIN_NET_URL", asString(getKey("BLOCKCHAIN_NET_URL", "https://rinkeby.infura.io/v3/"))
        buildConfigField javaTypes.STRING, "RELAY_SERVICE_URL", asString(getKey("RELAY_SERVICE_URL", "https://safe-relay.rinkeby.gnosis.pm/api/"))
        buildConfigField javaTypes.STRING, "NOTIFICATION_SERVICE_URL", asString(getKey("NOTIFICATION_SERVICE_URL", "https://safe-notification.gnosis.pm/api/"))
        // Blockchain settings
        buildConfigField javaTypes.LONG, "BLOCKCHAIN_CHAIN_ID", getKey("BLOCKCHAIN_CHAIN_ID", "4")
        // Certificates
        buildConfigField javaTypes.STRING, "PINNED_URLS", asString(getKey("PINNED_URLS", "*.staging.gnosisdev.com,*.dev.gnosisdev.com,*.gnosisdev.pm,*.gnosis.pm"))
        buildConfigField javaTypes.STRING, "PINNED_ROOT_CERTIFICATE_HASHES", asString(getKey("ROOT_CERTIFICATE_HASH",
                "sha256/++MBgDH5WGvL9Bcn5Be30cRcL0f5O+NyoXuWtQdX1aI=," +
                        "sha256/f0KW/FtqTjs108NpYj42SrGvOB2PpxIVM8nWxjPqJGE=," +
                        "sha256/NqvDJlas/GRcYbcWE8S/IceH9cq77kg0jVhZeAPXq8k=," +
                        "sha256/9+ze1cZgR9KO1kZrVDxA4HQ6voHRCSVNz4RdTCx4U8U=," +
                        "sha256/KwccWaCgrnaw6tsrrSO61FgLacNgG2MMLq8GE6+oP5I="))

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        project.ext.set("archivesBaseName", String.format("gnosis-safe-%s", defaultConfig.versionCode))

        ext.betaDistributionGroupAliases = System.getenv("FABRIC_GROUP_INTERNAL_BETA")
        ext.betaDistributionReleaseNotes = System.getenv("APP_RELEASE_NOTES")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    signingConfigs {
        debug {
            // We add the debug keystore to repo so that the travis build will always have the same signature
            storeFile file("../debug.keystore")
        }
        release {
            storeFile file(getKey("SIGNING_KEYFILE_PATH", "../gnosis-upload.jks"))
            storePassword getKey("SIGNING_STORE_PASSWORD")
            keyAlias "gnosis"
            keyPassword getKey("SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            buildConfigField javaTypes.STRING, "RELAY_SERVICE_URL", asString(getKey("RELAY_SERVICE_URL", "https://safe-relay.staging.gnosisdev.com/api/"))
            buildConfigField javaTypes.STRING, "NOTIFICATION_SERVICE_URL", asString(getKey("NOTIFICATION_SERVICE_URL", "https://safe-notification.staging.gnosisdev.com/api/"))
            buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0xAb8C18E66135561676f0781555D05CF6B22024A3"))
        }

        internal {
            applicationIdSuffix ".internal"
            versionNameSuffix "-internal"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            buildConfigField javaTypes.BOOLEAN, "VERBOSE_EXCEPTIONS", getKey("VERBOSE_EXCEPTIONS", "true")
            buildConfigField javaTypes.STRING, "RELAY_SERVICE_URL", asString(getKey("RELAY_SERVICE_URL", "https://safe-relay.staging.gnosisdev.com/api/"))
            buildConfigField javaTypes.STRING, "NOTIFICATION_SERVICE_URL", asString(getKey("NOTIFICATION_SERVICE_URL", "https://safe-notification.staging.gnosisdev.com/api/"))
            buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0xAb8C18E66135561676f0781555D05CF6B22024A3"))
        }

        rinkeby {
            applicationIdSuffix ".dev"
            versionNameSuffix "-rinkeby"
            minifyEnabled true
            signingConfig signingConfigs.release
        }

        release {
            minifyEnabled true
            multiDexEnabled false
            signingConfig signingConfigs.release
            buildConfigField javaTypes.LONG, "BLOCKCHAIN_CHAIN_ID", getKey("BLOCKCHAIN_CHAIN_ID", "1")
            buildConfigField javaTypes.STRING, "BLOCKCHAIN_NET_URL", asString(getKey("BLOCKCHAIN_NET_URL", "https://mainnet.infura.io/v3/"))
            buildConfigField javaTypes.STRING, "RELAY_SERVICE_URL", asString(getKey("RELAY_SERVICE_URL", "https://safe-relay.gnosis.pm/api/"))
            buildConfigField javaTypes.STRING, "SAFE_CREATION_FUNDER", asString(getKey("SAFE_CREATION_FUNDER", "0x07F455F30e862E13E3E3D960762cB11c4F744d52"))
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}

androidExtensions {
    experimental = true
}

jacoco {
    toolVersion = versions.jacoco
    version = versions.jacoco
}

dependencies {
    // We specify junit before anything else to make sure that this version is prioritized over the
    // one bundled in the android.jar
    testImplementation "junit:junit:$versions.junit"

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Gnosis Svalinn
    implementation "com.github.gnosis.svalinn-kotlin:accounts-base:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:accounts-kethereum:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:android-common:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:blockies:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:crypto:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:eip712:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:eip712-adapter-moshi:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:ethereum:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:ethereum-rpc:$versions.svalinn"
    implementation("com.github.gnosis.svalinn-kotlin:ethereum-rpc-retrofit:$versions.svalinn") {
        exclude group: "com.squareup.retrofit2", module: "converter-moshi"
    }
    implementation "com.github.gnosis.svalinn-kotlin:utils-ethereum:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:mnemonic:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:mnemonic-android:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:models:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:security:$versions.svalinn"
    implementation "com.github.gnosis.svalinn-kotlin:utils:$versions.svalinn"

    // Gnosis Bivrost
    implementation "com.github.gnosis.bivrost-kotlin:bivrost-solidity-types:$versions.bivrost"

    // Fabric
    implementation("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics@aar") {
        transitive = true
    }

    // Kethereum RLP
    implementation "com.github.walleth.kethereum:rlp:$versions.kethereum"

    // Wallet Connect
    implementation "com.github.WalletConnect:kotlin-walletconnect-lib:$versions.wallet_connect"

    // AndroidX
    implementation "androidx.appcompat:appcompat:$versions.androidx_app_compat"
    implementation "androidx.cardview:cardview:$versions.androidx_card_view"
    implementation "androidx.recyclerview:recyclerview:$versions.androidx_recycler_view"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx_constraint_layout"
    kapt "androidx.lifecycle:lifecycle-compiler:$versions.androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.androidx_lifecycle"
    kapt "androidx.room:room-compiler:$versions.androidx_room"
    implementation "androidx.room:room-runtime:$versions.androidx_room"
    implementation "androidx.room:room-rxjava2:$versions.androidx_room"
    implementation "androidx.multidex:multidex:$versions.multidex"

    // Google Material
    implementation "com.google.android.material:material:$versions.material"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$versions.rxjava"
    implementation "io.reactivex.rxjava2:rxkotlin:$versions.rxkotlin"
    implementation "com.gojuno.koptional:koptional:$versions.koptional"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"

    // Firebase
    implementation "com.google.firebase:firebase-core:$versions.firebase_core"
    implementation "com.google.firebase:firebase-messaging:$versions.firebase_messaging"
    implementation "com.google.android.gms:play-services-auth:$versions.play_services_auth"

    // String formatting
    implementation "com.squareup.phrase:phrase:$versions.phrase"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    // Moshi
    implementation "com.squareup.moshi:moshi:$versions.moshi"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation("com.squareup.retrofit2:converter-moshi:$versions.retrofit") {
        exclude group: "com.squareup.moshi", module: "moshi"
    }
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"

    // Logging
    implementation "com.jakewharton.timber:timber:$versions.timber"

    // RxBinding
    implementation("com.jakewharton.rxbinding2:rxbinding-kotlin:$versions.rxbinding") {
        exclude group: "io.reactivex.rxjava2", module: "rxandroid"
    }
    implementation("com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$versions.rxbinding") {
        exclude group: "io.reactivex.rxjava2", module: "rxandroid"
    }
    implementation("com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$versions.rxbinding") {
        exclude group: "io.reactivex.rxjava2", module: "rxandroid"
    }
    implementation("com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$versions.rxbinding") {
        exclude group: "io.reactivex.rxjava2", module: "rxandroid"
    }
    implementation("com.jakewharton.rxbinding2:rxbinding-design-kotlin:$versions.rxbinding") {
        exclude group: "io.reactivex.rxjava2", module: "rxandroid"
    }

    implementation "com.squareup.picasso:picasso:$versions.picasso"

    // More
    implementation "com.google.zxing:core:$versions.zxing"
    implementation "com.github.clans:fab:$versions.floating_action_button"
    implementation("me.zhanghai.android.materialprogressbar:library:$versions.material_progressbar") {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation("org.bouncycastle:bcprov-jdk15on:$versions.bouncycastle", {
        exclude group: 'junit', module: 'junit'
    })

    // Testing
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
    testImplementation "com.github.gnosis.svalinn-kotlin:utils-testing:$versions.svalinn"
    testImplementation "org.mockito:mockito-core:$versions.mockito"
    testImplementation "org.mockito:mockito-inline:$versions.mockito"

    // UI tests
    androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
    androidTestImplementation("androidx.test.espresso:espresso-intents:$versions.espresso")
    androidTestImplementation("androidx.test.espresso:espresso-core:$versions.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation "androidx.test.ext:junit:$versions.androidx_test_ext"
}

apply plugin: 'com.google.gms.google-services'
