apply plugin: 'jacoco'

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}

jacoco {
    toolVersion = versions.jacoco
    version = versions.jacoco
}

private static boolean isAndroidModule(Project project) {
    boolean isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
    boolean isAndroidApp = project.plugins.hasPlugin('com.android.application')
    return isAndroidLibrary || isAndroidApp
}


//afterEvaluate { project ->
//    if (isAndroidModule(project)) {
//        setupAndroidReporting()
//    } else {
//        setupKotlinReporting()
//    }
//}

def setupKotlinReporting() {
    jacocoTestReport {
        dependsOn test
        reports {
            csv.enabled false // change if needed
            xml.enabled true // change if needed
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

def setupAndroidReporting() {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses true
    }

    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
        reports {
            csv.enabled false
            xml.enabled true
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
        // Change as needed
        def fileFilter = [
                '**/*Test*.*',
                '**/AutoValue_*.*',
                '**/*JavascriptBridge.class',
                '**/R.class',
                '**/R$*.class',
                '**/Manifest*.*',
                'android/**/*.*',
                '**/BuildConfig.*',
                '**/*$ViewBinder*.*',
                '**/*$ViewInjector*.*',
                '**/*$InjectAdapter.class',
                '**/*$ModuleAdapter.class',
                '**/*$ViewInjector*.class',
                '**/*_*MembersInjector*.class',
                '**/Dagger*Component*.class', // covers component implementations
                '**/Dagger*Component*$Builder.class', // covers component builders
                '**/*_*Factory*.class',
                '**/*_*Impl*.class',
//                '**/*Fragment.class',
//                '**/*View.class',
        ]
        def debugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: fileFilter
        )
        def mainSrc = "$projectDir/src/main/java"
        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([debugTree])
        executionData.from = fileTree(
                dir: project.buildDir,
                includes: [
                        'jacoco/testDebugUnitTest.exec',
                        'outputs/code-coverage/connected/*coverage.ec'
                ]
        )
    }
}

def setupAndroidCoverageVerification(threshold) {
    task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: [ 'testDebugUnitTest' ]) {
        violationRules {
            rule {
                limit {
                    minimum = threshold
                }
            }
        }
        final def coverageSourceDirs = [
                "$projectDir/src/main/java",
                "$projectDir/src/main/kotlin"
        ]
        final def debugTree = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/debug",
                excludes: jacocoFileFilter
        )
        sourceDirectories.from = files(coverageSourceDirs)
        classDirectories.from = files([debugTree])
        executionData.from = fileTree(
                dir: project.buildDir,
                includes: ['jacoco/testDebugUnitTest.exec']
        )
    }
}
def setupKotlinCoverageVerification(threshold) {
    jacocoTestCoverageVerification {
        dependsOn test
        violationRules {
            rule {
                limit {
                    minimum = threshold
                }
            }
        }
    }
}

afterEvaluate { project ->
    def ignoreList = jacocoIgnoreList
    def projectName = project.name
    if (ignoreList.contains(projectName)) {
        println "Jacoco: ignoring project ${projectName}"
        return false
    }
    def threshold = project.hasProperty('jacocoCoverageThreshold')
            ? project.jacocoCoverageThreshold
            : project.jacocoCoverageThresholdDefault
    if (isAndroidModule(project)) {
        setupAndroidReporting()
        setupAndroidCoverageVerification(threshold)
    } else {
        setupKotlinReporting()
        setupKotlinCoverageVerification(threshold)
    }
}

project.ext {
    jacocoCoverageThresholdDefault = 0.60

    jacocoIgnoreList = [
            "module-name-1",
            "module-name-2"
    ]
    // Exclude file by names, packages or types. Such files will be ignored during test coverage
    // calculation
    jacocoFileFilter = [
            '**/*App.*',
            '**/*Application.*',
            '**/*Activity.*',
            '**/*Fragment.*',
            '**/*View.*',
            '**/*ViewGroup.*',
            '**/*JsonAdapter.*',
            '**/di/**',
            '**/*Dagger.*'
    ]
}

class TestExistenceValidation extends DefaultTask {
    static final SRC_DIR = 'src'
    static final JAVA_DIR = 'java'
    static final TEST_DIRS = ['test', 'androidTest']
    @TaskAction
    void execute() {
        if (shouldSkip(project)) return // implement `shouldSkip` as required for your project or just remove this line
        File srcDir = new File(project.projectDir, SRC_DIR)
        FileFilter filter = { it.isDirectory() }
        File[] subDirs = srcDir.listFiles(filter) ?: []
        File testsDir = subDirs.find { TEST_DIRS.contains(it.name) }
        if (testsDir) {
            File javaTestsDir = testsDir
                    .listFiles(filter)
                    .find { it.name == JAVA_DIR }
            if (javaTestsDir && javaTestsDir.list().length > 0) {
                return
            }
        }
        throw new GradleException("${project.name} has no unit tests.")
    }
}
